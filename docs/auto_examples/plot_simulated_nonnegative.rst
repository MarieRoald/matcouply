
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\plot_simulated_nonnegative.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_simulated_nonnegative.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_simulated_nonnegative.py:


Simple example with simulated non-negative components.
------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 5-14

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np
    import tensorly as tl
    from component_vis.factor_tools import factor_match_score

    import matcouply.decomposition as decomposition
    from matcouply.coupled_matrices import CoupledMatrixFactorization








.. GENERATED FROM PYTHON SOURCE LINES 15-17

Setup
^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 17-34

.. code-block:: default


    I, J, K = 10, 15, 20
    rank = 3
    noise_level = 0.2
    rng = np.random.default_rng(0)


    def truncated_normal(size):
        x = rng.standard_normal(size=size)
        x[x < 0] = 0
        return tl.tensor(x)


    def normalize(x):
        return x / tl.sqrt(tl.sum(x ** 2, axis=0, keepdims=True))









.. GENERATED FROM PYTHON SOURCE LINES 35-37

Generate simulated data that follows the PARAFAC2 constraint
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 37-47

.. code-block:: default

    A = rng.uniform(size=(I, rank)) + 0.1  # Add 0.1 to ensure that there is signal for all components for all slices
    A = tl.tensor(A)

    B_blueprint = truncated_normal(size=(J, rank))
    B_is = [np.roll(B_blueprint, i, axis=0) for i in range(I)]
    B_is = [tl.tensor(B_i) for B_i in B_is]

    C = truncated_normal(size=(K, rank))
    C = tl.tensor(C)








.. GENERATED FROM PYTHON SOURCE LINES 48-50

Plot the simulated components
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 50-73

.. code-block:: default


    fig, axes = plt.subplots(2, 3, tight_layout=True)

    axes[0, 0].plot(normalize(A))
    axes[0, 0].set_title("$\\mathbf{A}$")

    axes[0, 1].plot(normalize(C))
    axes[0, 1].set_title("$\\mathbf{C}$")

    axes[0, 2].axis("off")

    axes[1, 0].plot(normalize(B_is[0]))
    axes[1, 0].set_title("$\\mathbf{B}_0$")

    axes[1, 1].plot(normalize(B_is[I // 2]))
    axes[1, 1].set_title(f"$\\mathbf{{B}}_{{{I//2}}}$")

    axes[1, 2].plot(normalize(B_is[-1]))
    axes[1, 2].set_title(f"$\\mathbf{{B}}_{{{I-1}}}$")

    plt.show()





.. image-sg:: /auto_examples/images/sphx_glr_plot_simulated_nonnegative_001.png
   :alt: $\mathbf{A}$, $\mathbf{C}$, $\mathbf{B}_0$, $\mathbf{B}_{5}$, $\mathbf{B}_{9}$
   :srcset: /auto_examples/images/sphx_glr_plot_simulated_nonnegative_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 74-76

Create the coupled matrix factorization, simulated data matrices and add noise
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 76-82

.. code-block:: default


    cmf = CoupledMatrixFactorization((None, (A, B_is, C)))
    matrices = cmf.to_matrices()
    noise = [tl.tensor(rng.uniform(size=M.shape)) for M in matrices]
    noisy_matrices = [M + N * noise_level * tl.norm(M) / tl.norm(N) for M, N in zip(matrices, noise)]








.. GENERATED FROM PYTHON SOURCE LINES 83-85

Fit a non-negative PARAFAC2 model to the noisy data
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 85-102

.. code-block:: default


    lowest_error = float("inf")
    for init in range(5):
        print("Init:", init)
        out = decomposition.parafac2_aoadmm(
            noisy_matrices, rank, n_iter_max=1000, non_negative=True, return_errors=True, random_state=init
        )
        if out[1].regularized_loss[-1] < lowest_error and out[1].satisfied_stopping_condition:
            out_cmf, diagnostics = out
            lowest_error = diagnostics.rec_errors[-1]

    print("=" * 50)
    print(f"Final reconstruction error: {lowest_error:.3f}")
    print(f"Feasibility gap for A: {diagnostics.feasibility_gaps[-1][0]}")
    print(f"Feasibility gap for B_is: {diagnostics.feasibility_gaps[-1][1]}")
    print(f"Feasibility gap for C: {diagnostics.feasibility_gaps[-1][2]}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Init: 0
    Init: 1
    Init: 2
    Init: 3
    Init: 4
    ==================================================
    Final reconstruction error: 0.095
    Feasibility gap for A: [0.0]
    Feasibility gap for B_is: [5.714683363840193e-09, 2.76068576817438e-10]
    Feasibility gap for C: [4.711115697405713e-11]




.. GENERATED FROM PYTHON SOURCE LINES 103-105

Compute factor match score to measure the accuracy of the recovered components
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 105-120

.. code-block:: default



    def get_stacked_CP_tensor(cmf):
        weights, factors = cmf
        A, B_is, C = factors

        stacked_cp_tensor = (weights, (A, np.concatenate(B_is, axis=0), C))
        return stacked_cp_tensor


    fms, permutation = factor_match_score(
        get_stacked_CP_tensor(cmf), get_stacked_CP_tensor(out_cmf), consider_weights=False, return_permutation=True
    )
    print(f"Factor match score: {fms}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Factor match score: 0.9847688723769972




.. GENERATED FROM PYTHON SOURCE LINES 121-123

Plot the loss logg
^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 123-130

.. code-block:: default


    fig, ax = plt.subplots(tight_layout=True)
    ax.semilogy(diagnostics.rec_errors)
    plt.xlabel("Iteration")
    plt.ylabel("Relative normed error (2-norm)")
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_simulated_nonnegative_002.png
   :alt: plot simulated nonnegative
   :srcset: /auto_examples/images/sphx_glr_plot_simulated_nonnegative_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 131-133

Plot the recovered components
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 133-159

.. code-block:: default


    out_weights, (out_A, out_B_is, out_C) = out_cmf
    out_A = out_A[:, permutation]
    out_B_is = [out_B_i[:, permutation] for out_B_i in out_B_is]
    out_C = out_C[:, permutation]

    fig, axes = plt.subplots(2, 3, tight_layout=True)

    axes[0, 0].plot(normalize(out_A))
    axes[0, 0].set_title("$\\mathbf{A}$")

    axes[0, 1].plot(normalize(out_C))
    axes[0, 1].set_title("$\\mathbf{C}$")

    axes[0, 2].axis("off")

    axes[1, 0].plot(normalize(out_B_is[0]))
    axes[1, 0].set_title("$\\mathbf{B}_0$")

    axes[1, 1].plot(normalize(out_B_is[I // 2]))
    axes[1, 1].set_title(f"$\\mathbf{{B}}_{{{I//2}}}$")

    axes[1, 2].plot(normalize(out_B_is[-1]))
    axes[1, 2].set_title(f"$\\mathbf{{B}}_{{{I-1}}}$")

    plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_simulated_nonnegative_003.png
   :alt: $\mathbf{A}$, $\mathbf{C}$, $\mathbf{B}_0$, $\mathbf{B}_{5}$, $\mathbf{B}_{9}$
   :srcset: /auto_examples/images/sphx_glr_plot_simulated_nonnegative_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  26.558 seconds)


.. _sphx_glr_download_auto_examples_plot_simulated_nonnegative.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_simulated_nonnegative.py <plot_simulated_nonnegative.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_simulated_nonnegative.ipynb <plot_simulated_nonnegative.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
